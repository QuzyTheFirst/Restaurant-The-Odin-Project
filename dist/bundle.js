(()=>{"use strict";var n={208:(n,e,r)=>{r.d(e,{A:()=>A});var t=r(354),a=r.n(t),o=r(314),i=r.n(o),s=r(417),c=r.n(s),d=new URL(r(799),r.b),l=i()(a()),p=c()(d);l.push([n.id,`:root{\n    --padding-from-sides: 24px;\n    --primary-color: #c5e2ff;\n    --secondary-color: #a9c9e9;\n}\n\nbody{\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    margin: 0;\n    padding: 0;\n    display: grid;\n    grid-template-rows: 75px 1fr 75px;\n\n    background-color: var(--primary-color);\n}\n\nheader{\n    background-color: var(--secondary-color);\n}\n\nfooter{\n    text-align: center;\n    background-color: var(--secondary-color);\n\n    display: grid;\n    align-items: center;\n}\n\nnav{\n    display: grid;\n    grid-template-columns: 5fr 1fr 1fr 1fr;\n\n    height: 100%;\n\n    text-align: center;\n    padding: 0 var(--padding-from-sides);\n}\n\nnav > div{\n    text-align: start;\n    align-self: center;\n\n    font-weight: bold;\n    font-size: 24px\n}\n\nnav > button{\n    background-color: var(--secondary-color);\n    border: 0;\n    cursor: pointer;\n\n    transition: 0.2s;\n}\n\nnav > button:hover{\n    background-color: var(--primary-color);\n}\n\nh1, h2{\n    text-align: center;\n}\n\n#content{\n    display: flex;\n    flex-direction: column;\n}\n\n#content > *{\n    flex: 1;\n    min-height: 300px;\n    height: 100%;\n}\n\n#content > section:first-child{\n    background-image: url(${p});\n    background-color: var(--primary-color);\n    background-blend-mode: multiply;\n    background-size: 50% 100%; \n}\n\n#content > section:nth-child(even){\n    background-color: var(--secondary-color);\n}\n\nsection{\n    display: grid;\n    align-content: center;\n    padding: 0 var(--padding-from-sides);\n    text-align: center;\n}\n\nsection.product{\n    display: grid;\n    grid-template-columns: 1fr 3fr;\n    grid-template-rows: 1fr 1fr;\n    place-items: center;\n    column-gap: 12px;\n}\n\nsection.product > img{\n    max-height: 275px;\n    max-width: 275px;\n    grid-row: 1 / -1;\n    align-self: center;\n    border-radius: 5px;\n}\n\nsection.product > h2{\n    align-self: end;\n}\n\nsection.product > p{\n    align-self: start;\n}\n\n#content > section:nth-child(even) > img{\n    border: 3px solid var(--primary-color);\n}\n\n#content > section:nth-child(odd) > img{\n    border: 3px solid var(--secondary-color);\n}`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,0BAA0B;IAC1B,wBAAwB;IACxB,0BAA0B;AAC9B;;AAEA;IACI,4DAA4D;IAC5D,SAAS;IACT,UAAU;IACV,aAAa;IACb,iCAAiC;;IAEjC,sCAAsC;AAC1C;;AAEA;IACI,wCAAwC;AAC5C;;AAEA;IACI,kBAAkB;IAClB,wCAAwC;;IAExC,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,sCAAsC;;IAEtC,YAAY;;IAEZ,kBAAkB;IAClB,oCAAoC;AACxC;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;;IAElB,iBAAiB;IACjB;AACJ;;AAEA;IACI,wCAAwC;IACxC,SAAS;IACT,eAAe;;IAEf,gBAAgB;AACpB;;AAEA;IACI,sCAAsC;AAC1C;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,OAAO;IACP,iBAAiB;IACjB,YAAY;AAChB;;AAEA;IACI,yDAA8C;IAC9C,sCAAsC;IACtC,+BAA+B;IAC/B,yBAAyB;AAC7B;;AAEA;IACI,wCAAwC;AAC5C;;AAEA;IACI,aAAa;IACb,qBAAqB;IACrB,oCAAoC;IACpC,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,2BAA2B;IAC3B,mBAAmB;IACnB,gBAAgB;AACpB;;AAEA;IACI,iBAAiB;IACjB,gBAAgB;IAChB,gBAAgB;IAChB,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,sCAAsC;AAC1C;;AAEA;IACI,wCAAwC;AAC5C",sourcesContent:[":root{\r\n    --padding-from-sides: 24px;\r\n    --primary-color: #c5e2ff;\r\n    --secondary-color: #a9c9e9;\r\n}\r\n\r\nbody{\r\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n    margin: 0;\r\n    padding: 0;\r\n    display: grid;\r\n    grid-template-rows: 75px 1fr 75px;\r\n\r\n    background-color: var(--primary-color);\r\n}\r\n\r\nheader{\r\n    background-color: var(--secondary-color);\r\n}\r\n\r\nfooter{\r\n    text-align: center;\r\n    background-color: var(--secondary-color);\r\n\r\n    display: grid;\r\n    align-items: center;\r\n}\r\n\r\nnav{\r\n    display: grid;\r\n    grid-template-columns: 5fr 1fr 1fr 1fr;\r\n\r\n    height: 100%;\r\n\r\n    text-align: center;\r\n    padding: 0 var(--padding-from-sides);\r\n}\r\n\r\nnav > div{\r\n    text-align: start;\r\n    align-self: center;\r\n\r\n    font-weight: bold;\r\n    font-size: 24px\r\n}\r\n\r\nnav > button{\r\n    background-color: var(--secondary-color);\r\n    border: 0;\r\n    cursor: pointer;\r\n\r\n    transition: 0.2s;\r\n}\r\n\r\nnav > button:hover{\r\n    background-color: var(--primary-color);\r\n}\r\n\r\nh1, h2{\r\n    text-align: center;\r\n}\r\n\r\n#content{\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n#content > *{\r\n    flex: 1;\r\n    min-height: 300px;\r\n    height: 100%;\r\n}\r\n\r\n#content > section:first-child{\r\n    background-image: url('./images/white-bg.jpg');\r\n    background-color: var(--primary-color);\r\n    background-blend-mode: multiply;\r\n    background-size: 50% 100%; \r\n}\r\n\r\n#content > section:nth-child(even){\r\n    background-color: var(--secondary-color);\r\n}\r\n\r\nsection{\r\n    display: grid;\r\n    align-content: center;\r\n    padding: 0 var(--padding-from-sides);\r\n    text-align: center;\r\n}\r\n\r\nsection.product{\r\n    display: grid;\r\n    grid-template-columns: 1fr 3fr;\r\n    grid-template-rows: 1fr 1fr;\r\n    place-items: center;\r\n    column-gap: 12px;\r\n}\r\n\r\nsection.product > img{\r\n    max-height: 275px;\r\n    max-width: 275px;\r\n    grid-row: 1 / -1;\r\n    align-self: center;\r\n    border-radius: 5px;\r\n}\r\n\r\nsection.product > h2{\r\n    align-self: end;\r\n}\r\n\r\nsection.product > p{\r\n    align-self: start;\r\n}\r\n\r\n#content > section:nth-child(even) > img{\r\n    border: 3px solid var(--primary-color);\r\n}\r\n\r\n#content > section:nth-child(odd) > img{\r\n    border: 3px solid var(--secondary-color);\r\n}"],sourceRoot:""}]);const A=l},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var r="",t=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),t&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=n(e),t&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(n,r,t,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(t)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<n.length;d++){var l=[].concat(n[d]);t&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),r&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=r):l[2]=r),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),e.push(l))}},e}},417:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},354:n=>{n.exports=function(n){var e=n[1],r=n[3];if(!r)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),o="/*# ".concat(a," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},72:n=>{var e=[];function r(n){for(var r=-1,t=0;t<e.length;t++)if(e[t].identifier===n){r=t;break}return r}function t(n,t){for(var o={},i=[],s=0;s<n.length;s++){var c=n[s],d=t.base?c[0]+t.base:c[0],l=o[d]||0,p="".concat(d," ").concat(l);o[d]=l+1;var A=r(p),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)e[A].references++,e[A].updater(u);else{var f=a(u,t);t.byIndex=s,e.splice(s,0,{identifier:p,updater:f,references:1})}i.push(p)}return i}function a(n,e){var r=e.domAPI(e);return r.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;r.update(n=e)}else r.remove()}}n.exports=function(n,a){var o=t(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var s=r(o[i]);e[s].references--}for(var c=t(n,a),d=0;d<o.length;d++){var l=r(o[d]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=c}}},659:n=>{var e={};n.exports=function(n,r){var t=function(n){if(void 0===e[n]){var r=document.querySelector(n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}e[n]=r}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,r)=>{n.exports=function(n){var e=r.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(r){!function(n,e,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var a=void 0!==r.layer;a&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,a&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var o=r.sourceMap;o&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(t,n,e.options)}(e,n,r)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},799:(n,e,r)=>{n.exports=r.p+"074ea77db52ba968e933.jpg"}},e={};function r(t){var a=e[t];if(void 0!==a)return a.exports;var o=e[t]={id:t,exports:{}};return n[t](o,o.exports,r),o.exports}r.m=n,r.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return r.d(e,{a:e}),e},r.d=(n,e)=>{for(var t in e)r.o(e,t)&&!r.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),r.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;r.g.importScripts&&(n=r.g.location+"");var e=r.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var t=e.getElementsByTagName("script");if(t.length)for(var a=t.length-1;a>-1&&(!n||!/^http(s?):/.test(n));)n=t[a--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=n})(),r.b=document.baseURI||self.location.href,r.nc=void 0,(()=>{var n=r(72),e=r.n(n),t=r(825),a=r.n(t),o=r(659),i=r.n(o),s=r(56),c=r.n(s),d=r(540),l=r.n(d),p=r(113),A=r.n(p),u=r(208),f={};function g(n,e){const r=document.createElement("section"),t=document.createElement("h2"),a=document.createElement("p");return t.textContent=n,r.appendChild(t),e&&(a.textContent=e,r.appendChild(a)),r}function h(n,e,r){const t=document.createElement("section"),a=document.createElement("img"),o=document.createElement("h2"),i=document.createElement("p");return a.src=n,t.appendChild(a),o.textContent=e,t.appendChild(o),r&&(i.textContent=r,t.appendChild(i)),t.className="product",t}function m(n){const e=g("Welcome to our restaurant!","Indulge your senses in an exquisite culinary journey at Taste Haven, where every dish is crafted with passion and precision. Nestled in the heart of Daugavpils, our restaurant offers a warm and inviting ambiance, perfect for intimate dinners, family gatherings, and celebrations alike."),r=g("Our Culinary Philosophy","At Taste Haven, we believe in the power of simplicity infused with creativity. Our culinary team meticulously selects the finest ingredients, sourced locally whenever possible, to create dishes that tantalize the taste buds and evoke a sense of comfort and satisfaction. From classic favorites to innovative creations, our menu reflects a harmonious blend of flavors from around the world, ensuring there's something to please every palate."),t=g("Exceptional Dining Experience","Whether you're craving a hearty meal after a long day or looking to savor a special occasion, Taste Haven promises an exceptional dining experience from start to finish. Our attentive staff is dedicated to providing impeccable service, ensuring that every visit leaves a lasting impression."),a=g("Discover Our Menu","Explore our diverse menu featuring a delectable array of appetizers, entrees, and desserts, all expertly crafted to please discerning taste buds. From succulent steaks and fresh seafood to vibrant vegetarian options, each dish is a testament to our commitment to quality and flavor.");n.appendChild(e),n.appendChild(r),n.appendChild(t),n.appendChild(a)}f.styleTagTransform=A(),f.setAttributes=c(),f.insert=i().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=l(),e()(u.A,f),u.A&&u.A.locals&&u.A.locals;const v=r.p+"81d449b3c6a54ce4049f.jpg",C=r.p+"414631848b72b012a900.jpg",y=r.p+"9d37ca5099f97d67dfb1.jpg",b=r.p+"dd55aa80b39fb1f7ab67.jpg";!function(){const n=document.querySelector("#content"),e=document.querySelector("#home"),r=document.querySelector("#menu"),t=document.querySelector("#about");function a(){n.innerHTML=""}e.addEventListener("click",(()=>{a(),m(n)})),r.addEventListener("click",(()=>{a(),function(n){const e=g("Taste Haven Menu"),r=h(v,"Crispy Calamari","Tender calamari rings lightly breaded and fried to perfection. Served with a zesty marinara sauce for dipping."),t=h(C,"Caprese Salad","Fresh buffalo mozzarella, ripe tomatoes, and basil leaves drizzled with balsamic glaze and extra virgin olive oil."),a=h(y,"Stuffed Mushrooms","Juicy mushroom caps stuffed with a savory mixture of spinach, garlic, and parmesan cheese, then baked until golden brown."),o=h(b,"Shrimp Tempura","Crispy tempura-battered shrimp served with a tangy soy dipping sauce and a side of pickled ginger.");n.appendChild(e),n.appendChild(r),n.appendChild(t),n.appendChild(a),n.appendChild(o)}(n)})),t.addEventListener("click",(()=>{a(),function(n){const e=g("About Taste Haven","Welcome to Taste Haven, where passion for food meets dedication to hospitality. Founded in 2004, Taste Haven has been a beloved culinary destination in Daugavpils for 20 years. Our journey began with a simple vision: to create a dining experience that celebrates the joy of good food, shared with friends and family in a welcoming atmosphere."),r=g("Our Story","Taste Haven was born out of a love for great food and a desire to create a gathering place where guests could enjoy delicious cuisine in a relaxed setting. Our founder, [Founder's Name], drew inspiration from their travels around the world, discovering diverse flavors and culinary traditions. With a commitment to excellence and a passion for hospitality, Taste Haven quickly became a beloved fixture in the local dining scene."),t=g("Our Philosophy","At Taste Haven, we believe that food is more than just sustenance – it's a form of art that nourishes the body and soul. That's why we're dedicated to sourcing the freshest, highest-quality ingredients and transforming them into dishes that delight the senses. Our culinary philosophy is rooted in simplicity, authenticity, and creativity, allowing us to create memorable meals that leave a lasting impression.");n.appendChild(e),n.appendChild(r),n.appendChild(t)}(n)})),a(),m(n)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,